<?xml version="1.0" encoding="utf-8"?>
<TitleWin xmlns="views.*" xmlns:mx="http://www.adobe.com/2006/mxml" width="414" height="388" 
	title="地图信息" creationComplete="init()" xmlns:utils="utils.*">
	<mx:Script>
		<![CDATA[
			import mx.events.ItemClickEvent;
			import mx.utils.ObjectProxy;
			import mx.rpc.events.ResultEvent;
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import utils.Utils;
			import flash.net.FileReference;
			import flash.events.ProgressEvent;
			import utils.FormValidator;
			import mx.controls.buttonBarClasses.ButtonBarButton;
			
			private var fileRef:FileReference;
			private var imageFilters:Array = [new FileFilter("JPEG Images", "*.jpg", "JPEG")];
			private var byteArray:ByteArray;
            private var bitmapData:BitmapData;
            private var loader:Loader=new Loader();
            
            public var pMap:XML;
            
            [Bindable]
            public var map:XML;
            
            [Bindable]
            private var submit:ButtonBarButton;
            
            private var isNew:Boolean = false;
            
            [Bindable]
            public var maps:XMLList;

            private var path:Array = new Array();
            private var action:int = 0;
            
            private function init_validators():void {
            	submit = buttonBar.getChildAt(0) as ButtonBarButton;
            	submit.enabled = false;
            	formValidator.addValidators(validators);
				formValidator.failedCallBack=function():void{
					submit.enabled=false;
				};
				formValidator.passedCallBack=function():void{
					submit.enabled=true;
				};	
            }
            
            private function init_fileRef():void {
            	Security.allowDomain("*");
				this.fileRef = new FileReference();
				fileRef.addEventListener(Event.SELECT, selectHandler);
				fileRef.addEventListener(Event.COMPLETE, completeHandler);
				fileRef.addEventListener(ProgressEvent.PROGRESS, onProgress);
				fileRef.addEventListener(DataEvent.UPLOAD_COMPLETE_DATA, responseHandler);	
            }
            
            private function init_map_path():void {
            	set_pos(pMap);
				var pStr:String = "";
				path.pop();
				pStr += path.pop();
				while(path.length > 0) {
					pStr += ">" + path.pop();
				}
				title += " [" + pStr + "]";	
            }
            
            private function init_image():void {
            	if(map) {
            		imgCan.visible = true;
            		img.source = utils.Utils.get_url(map.@img);
            	}
            }
            
            private function show_image_inf():void {
            	inf.text = img.contentWidth + " x " + img.contentHeight;	
            }
            
            private function init():void {
            	init_validators();
				init_fileRef();
				init_map_path();
				init_image();
				isNew = !map;
            }
            
            private function set_pos(map:XML):void {
            	path.push(map.@name);
            	if(map.parent()) {
            		set_pos(map.parent() as XML);	
            	}
            }
            
			private function fileBrowse():void {
				fileRef.browse(imageFilters);	
			}
			
			private function selectHandler(event:Event):void {
				action = 0;
				//fileRef.load();
				buttons.visible = false;
				buttons.includeInLayout = false;
				progress.visible = true;
				progress.includeInLayout = true;
			}
			
			private function completeHandler(event:Event):void {
				//byteArray = fileRef.data;
                loader.contentLoaderInfo.addEventListener(Event.COMPLETE,loaderCompleteHandler);
                loader.loadBytes(byteArray);	
			}
			
			private function loaderCompleteHandler(event:Event):void {
					var bitmap:Bitmap = Bitmap(loader.content);
	                //bitmapData = bitmap.bitmapData;
	                img.source = bitmap;	
	                imgCan.visible = true;
	                inf.text = bitmap.bitmapData.width + " x " + bitmap.bitmapData.height + "  " + Math.round(fileRef.size / 1024) + "KB";
					buttons.visible = true;
					buttons.includeInLayout = true;
					progress.visible = false;
					progress.includeInLayout = false;
					submit.enabled = true;
			}
			
			private function onProgress(e:ProgressEvent):void {
				var str:String = "数据提交中 ";
				if(action == 0) str = "图片加载中 ";
				var proc: uint = e.bytesLoaded / e.bytesTotal * 100;
                bar.setProgress(proc, 100);
                bar.label= str + proc + "%";	
			}
			
			private function do_upload():void {
				action = 1;
				bar.setProgress(0,100);
				bar.label= "保存中 0%";
				this.enabled = false;
//				if(isNew && !fileRef.data) {
//					utils.Alert.show("请选择要上传的地图文件      ");
//					this.enabled = true;
//					return;
//				}
				buttons.visible = false;
				buttons.includeInLayout = false;
				progress.visible = true;
				progress.includeInLayout = true;
				
//				if(fileRef.data) {
//					var request:URLRequest;
//					var vars:URLVariables = new URLVariables();
//					vars["map[name]"] = map_name.text;
//					if(isNew) {
//						request = new URLRequest(utils.Utils.get_url("/maps/create"));
//						vars["map[parent_id]"] = pMap.@id; 
//					} else {
//						request = new URLRequest(utils.Utils.get_url("/maps/update/" + map.@id));
//					}			
//					request.method = URLRequestMethod.POST;		
//					request.data = vars;
//					try {
//						fileRef.upload(request);
//					} catch(error:Error) {}
//				} else {
//					var params:URLVariables = new URLVariables;
//					params['map[name]'] = map_name.text;
//					mapRPC.send(params);
//				}	
			}
			
			private function responseHandler(event:DataEvent):void {
				if(isNew) {
					map = XML(event.data);
				} else {
					map.@name = map_name.text;
				}
				callBack.call(parent, map, isNew);
				close();	
			}
			
			private function saved(event:ResultEvent):void {
				map.@name = map_name.text;
				callBack.call(parent, map, isNew);
				close();	
			}
			
			private function buttonsClick(event:ItemClickEvent):void {
				switch(event.index) {
					case 0:
						do_upload();
						break;
					case 1:
						close();
						break;
				}
			}
		]]>
	</mx:Script>
	
	<mx:HTTPService id="mapRPC" url="{Utils.get_url('/maps/update/' + map.@id)}" method="POST" useProxy="false" showBusyCursor="true" result="saved(event)"/>
	
	<mx:Array id="validators">
		<mx:Validator property="text" required="true" requiredFieldError="请填写地图名称" source="{map_name}"/>
		<utils:UniqueValidatorXML errorMessage="地图名称已存在" field="@name" list="{maps}" selfObj="{map}" required="true" source="{map_name}" property="text" requiredFieldError="请填写地图名称"/>
	</mx:Array>
	
	<mx:VBox x="0" y="0" width="100%" height="100%" horizontalAlign="center">
		<mx:Form width="100%" defaultButton="{submit}" height="7"/>
		<mx:VBox width="100%" height="100%" horizontalAlign="center">
			<mx:HBox width="95%" horizontalCenter="0">
				<mx:FormItem label="地图名称:">
					<mx:TextInput id="map_name" text="{map.@name}"/>
				</mx:FormItem>
				<mx:Button label="选择要上传的地图文件" click="fileBrowse()"/>
			</mx:HBox>
			<mx:Canvas id="imgCan" width="100%" height="100%" visible="false">
				<utils:LoadingImage complete="show_image_inf()" x="0" y="0" width="100%" height="100%" id="img" horizontalAlign="center" verticalAlign="middle"/>
				<mx:Canvas x="0" y="0" width="100%" height="20" backgroundColor="#000000" backgroundAlpha="0.5">
					<mx:Label id="inf" x="0" y="0" width="100%" height="100%"/>
				</mx:Canvas>
			</mx:Canvas>
		</mx:VBox>
	</mx:VBox>
	
	
	<mx:ControlBar>
		<mx:HBox id="buttons">
			<mx:ButtonBar id="buttonBar" itemClick="buttonsClick(event)" horizontalGap="-1">
				<mx:dataProvider>
					<mx:String>保存</mx:String>
					<mx:String>关闭</mx:String>
				</mx:dataProvider>
			</mx:ButtonBar>
		</mx:HBox>
		<mx:HBox width="100%" height="100%" id="progress" visible="false" includeInLayout="false">
			<mx:ProgressBar id="bar" width="100%" verticalCenter="0" horizontalCenter="0" 
				label="保存中 %0" mode="manual" minimum="0" maximum="100"/>
		</mx:HBox>
	</mx:ControlBar>
</TitleWin>
