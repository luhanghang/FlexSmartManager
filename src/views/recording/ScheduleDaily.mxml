<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml" horizontalScrollPolicy="off" 
	width="100%" height="100%" xmlns:recording="views.recording.*">
	<mx:Script>
		<![CDATA[
			import mx.events.FlexEvent;
			import mx.core.Application;
			import mx.rpc.events.ResultEvent;
			import events.DailyScheduleEvent;
			import mx.controls.Alert;
			import utils.Utils;
			
			[Bindable]
			public var spot:XML;
			
			[Bindable]
			public var scheduleItems:XML;
			
			private var scheduleDays:Dictionary;
			
//			[Bindable]
//			private var gFilter:GlowFilter = Utils.neonFilter();
		
			[Bindable]
			static public var hours:Array = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23];
			
			public function init():void {
				if(spot) {
					scheduleRPC.url = Utils.get_url("/record_schedule_dailies/list/" + spot.@id);
					scheduleRPC.send();
				}
			}
			
			private function add_schedule(item:XML):void {
				var c:ScheduleItemDaily = scheduleDays[String(item.scheduleDate)].addItem(item.startHour, item.startMin, item.endHour, item.endMin, item.lastTime, item.enabled == "1"?true:false, int(item.color));
				c.scheduleId = item.@id;
				c.addEventListener(MouseEvent.DOUBLE_CLICK, showEditor);
			}
			
			private function showEditor(event:MouseEvent):void {
				var s:ScheduleItemDaily = event.currentTarget as ScheduleItemDaily;
				scheduleEditor.setScheduleItem(s);
				scheduleEditor.visible = true;
				scheduleEditor.includeInLayout = true;
				scheduleEditor.x = event.localX + s.x;
				if(scheduleEditor.x + scheduleEditor.width > width) {
					scheduleEditor.x = width - scheduleEditor.width;
				}
				scheduleEditor.y = event.localY + s.parent.parent.y;
				if(scheduleEditor.y + scheduleEditor.height > height) {
					scheduleEditor.y = height - scheduleEditor.height;
				}
				s.edit();
				fade.play();			
			}
			
			public function init_schedules(event:ResultEvent):void {
				scheduleDays = new Dictionary;
				removeAll();
				scheduleItems = XML(event.result);
				for each(var item:XML in scheduleItems.Schedule) {
					if(scheduleDays[String(item.scheduleDate)] == null) addNewSchedule(item);
				}
			}
			
			private function addSchedule(event:FlexEvent):void {
				var c:ScheduleDayDaily = event.currentTarget as ScheduleDayDaily;
				for each(var item:XML in scheduleItems.Schedule) {
					if(item.scheduleDate == c.date)
						add_schedule(item);
				}
			}
			
			private function removeAll():void {
				Utils.doFreeze(mx.core.Application.application, false);
				scheduleBox.removeAllChildren();
			}
			
			public function addItem(date:String, startHour:String, startMin:String, endHour:String, endMin:String, last:Number, state:Boolean, color:Object):void {
				scheduleAddRPC.url = Utils.get_url("/record_schedule_dailies/create");
				var params:URLVariables = new URLVariables;
				params['RecordSchedule[schedule_date]'] = date;
				params['RecordSchedule[start_hour]'] = startHour;
				params['RecordSchedule[start_min]'] = startMin;
				params['RecordSchedule[end_hour]'] = endHour;
				if(endHour == '00' || endHour == '0') {
					endMin = '0';
				}
				params['RecordSchedule[end_min]'] = endMin;
				params['RecordSchedule[last_time]'] = last;
				params['RecordSchedule[color]'] = color;
				params['RecordSchedule[spot_id]'] = spot.@id;
				params['RecordSchedule[enabled]'] = state?"1":"0"; 
				scheduleAddRPC.send(params);
				Utils.doFreeze(mx.core.Application.application, true);
			}
			
			public function doAddItem(event:ResultEvent):void {
				Utils.doFreeze(mx.core.Application.application, false);
				var item:XML = XML(event.result);
				scheduleItems.appendChild(item);
				if(scheduleDays[String(item.scheduleDate)] == null) 
					addNewSchedule(item, true);
				else
					add_schedule(item); 	
			}
			
			private function addNewSchedule(item:XML, sort:Boolean = false):void {
				var c:ScheduleDayDaily = new ScheduleDayDaily;
				c.date = item.scheduleDate;
				if(sort) {
					var index:Number = scheduleBox.numChildren;
					for each(var s:ScheduleDayDaily in scheduleBox.getChildren()) {
						if( new Date(Utils.StringReplaceAll(s.date, "-","/")).valueOf() - 
							new Date(Utils.StringReplaceAll(item.scheduleDate,"-","/")).valueOf() > 0) {
							index = scheduleBox.getChildIndex(s);
							break;
						}
					}
					scheduleBox.addChildAt(c, index);	
				} else {
					scheduleBox.addChild(c);
				}
				scheduleDays[String(item.scheduleDate)] = c;
				c.addEventListener(FlexEvent.CREATION_COMPLETE, addSchedule);	
			}
			
			private function changeSchedule(event:DailyScheduleEvent):void {
				var item:ScheduleItemDaily = event.item;
				scheduleDays[item.date].setScheduleItem(item);
				scheduleUpdateRPC.url = Utils.get_url("/record_schedule_dailies/update/" + item.scheduleId);
				var params:URLVariables = new URLVariables;
				params['RecordSchedule[start_hour]'] = item.startHour;
				params['RecordSchedule[start_min]'] = item.startMin;
				params['RecordSchedule[end_hour]'] = item.endHour;
				if(item.endHour == '00' || item.endHour == '0') {
					item.endMin = '0';
				}
				params['RecordSchedule[end_min]'] = item.endMin;
				params['RecordSchedule[last_time]'] = item.lastTime;
				params['RecordSchedule[enabled]'] = item.state?"1":"0";
				scheduleUpdateRPC.send(params);	
			}
			
			private var _removeItem:ScheduleItemDaily;
			public function removeItem(item:ScheduleItemDaily):void {
				Utils.doFreeze(mx.core.Application.application, true);
				_removeItem = item;
				scheduleRemoveRPC.url = Utils.get_url("/record_schedule_dailies/destroy/" + item.scheduleId);
				scheduleRemoveRPC.send();
			}
			
			private function doRemoveItem(event:ResultEvent):void {
				Utils.doFreeze(mx.core.Application.application, false);
				_removeItem.parent.removeChild(_removeItem);
			}
			
			public function removeAllItems(date:String):void {
				Utils.doFreeze(mx.core.Application.application, true);
				scheduleRemoveAllRPC.url = Utils.get_url("/record_schedule_dailies/destroy_all/" + spot.@id + "?date=" + date);
				scheduleRemoveAllRPC.send();
			}
			
			public function removeDate(event:ResultEvent):void {
				Utils.doFreeze(mx.core.Application.application, false);
				scheduleBox.removeChild(scheduleDays[event.result]);		
			}
		]]>
	</mx:Script>
	
	<mx:HTTPService id="scheduleRPC" useProxy="false" showBusyCursor="true" resultFormat="xml" result="init_schedules(event)"/>
	<mx:HTTPService id="scheduleUpdateRPC" method="POST" useProxy="false" showBusyCursor="true"/>
	<mx:HTTPService id="scheduleAddRPC" method="POST" useProxy="false" showBusyCursor="true" resultFormat="xml" result="doAddItem(event)"/>
	<mx:HTTPService id="scheduleRemoveRPC" useProxy="false" showBusyCursor="true" result="doRemoveItem(event)"/>
	<mx:HTTPService id="scheduleRemoveAllRPC" useProxy="false" showBusyCursor="true" resultFormat="text" result="removeDate(event)"/>
	
	<mx:VBox y="0" width="100%" height="100%" left="-1" right="-1" verticalGap="-1" id="scheduleBox"/>
	
	<mx:Fade id="fade" alphaFrom="0" alphaTo="1" target="{scheduleEditor}"/>
	<recording:ScheduleEditorDaily id="scheduleEditor" ScheduleChange="changeSchedule(event)"/>
</mx:Canvas>
